package net.sf.extjwnl.dictionary;

import junit.framework.AssertionFailedError;
import junit.framework.TestCase;
import junit.framework.TestResult;

/**
 * @author Andy Schneider http://www.javaworld.com/javaworld/jw-12-2000/jw-1221-junit.html
 */
public abstract class MultiThreadedTestCase extends TestCase {

    /**
     * The threads that are executing.
     */
    private Thread threads[] = null;

    private final Object lock = new Object();

    /**
     * The tests TestResult.
     */
    private TestResult testResult = null;

    /**
     * Simple constructor.
     *
     * @param name test name
     */
    public MultiThreadedTestCase(final String name) {
        super(name);
    }

    /**
     * Override run so we can save the test result.
     */
    public void run(final TestResult result) {
        testResult = result;
        super.run(result);
        testResult = null;
    }

    protected void runTestCaseRunnables(final TestCaseRunnable[] runnables) {
        if (runnables == null) {
            throw new IllegalArgumentException("runnables is null");
        }
        threads = new Thread[runnables.length];
        System.arraycopy(runnables, 0, threads, 0, threads.length);
        for (Thread thread : threads) {
            thread.start();
        }
        try {
            for (Thread thread : threads) {
                thread.join();
            }
        } catch (InterruptedException ignore) {
            System.out.println("Thread join interrupted.");
        }
        threads = null;
    }

    /**
     * Handle an exception. Since multiple threads won't have their
     * exceptions caught the threads must manually catch them and call
     * handleException().
     *
     * @param t Exception to handle.
     */
    protected void handleException(final Throwable t) {
        synchronized (testResult) {
            if (t instanceof AssertionFailedError) {
                testResult.addFailure(this, (AssertionFailedError) t);
            } else {
                testResult.addError(this, t);
            }
        }
    }

    /**
     * A test case thread. Override runTestCase () and define
     * behaviour of test in there.
     */
    protected abstract class TestCaseRunnable extends Thread implements Runnable {
        /**
         * Override this to define the test
         * @throws Throwable Throwable
         */
        public abstract void runTestCase()
                throws Throwable;

        /**
         * Run the test in an environment where
         * we can handle the exceptions generated by the test method.
         */
        public void run() {
            try {
                runTestCase();
            } catch (Throwable t) /* Any other exception we handle and then we interrupt the other threads.*/ {
                handleException(t);
                interruptThreads();
            }
        }

        protected void interruptThreads() {
            synchronized (lock) {
                for (Thread t : threads) {
                    if (null != t && t.isAlive()) {
                        t.interrupt();
                    }
                }
            }
        }
    }
}